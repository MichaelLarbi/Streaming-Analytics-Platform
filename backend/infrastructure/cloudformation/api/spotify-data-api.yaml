AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway for Spotify Data Fetcher'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'staging'
      - 'prod'
    Description: 'Environment name'

  ProjectName:
    Type: String
    Default: 'streaming-analytics'
    Description: 'Project name for resource naming'

  LambdaArn:
    Type: String
    Description: 'ARN of the Spotify Data Fetcher Lambda function'

Resources:
  SpotifyApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-spotify-api'
      Description: 'API for Spotify Data Fetcher'
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayRootResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SpotifyApi
      ParentId: !GetAtt SpotifyApi.RootResourceId
      PathPart: 'spotify'

  ApiGatewayDataResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SpotifyApi
      ParentId: !Ref ApiGatewayRootResource
      PathPart: 'data'

  ApiGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref SpotifyApi
      ResourceId: !Ref ApiGatewayDataResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '400'
        - StatusCode: '500'

  ApiGatewayOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref SpotifyApi
      ResourceId: !Ref ApiGatewayDataResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ApiGatewayMethod
      - ApiGatewayOptions
    Properties:
      RestApiId: !Ref SpotifyApi
      Description: 'Deployment for Spotify Data API'

  ApiGatewayStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref SpotifyApi
      StageName: !Ref Environment

  LambdaApiGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaArn
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SpotifyApi}/*'

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${SpotifyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/spotify/data'

  ApiId:
    Description: 'API Gateway ID'
    Value: !Ref SpotifyApi