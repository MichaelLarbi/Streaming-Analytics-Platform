AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Apple Music data fetcher Lambda function'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'staging'
      - 'prod'
    Description: 'Environment name for resource naming'

  ProjectName:
    Type: String
    Default: 'streaming-analytics'
    Description: 'Base name for the project resources'

Resources:
  AppleMusicDataFetcherRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-apple-music-fetcher-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AppleMusicDataFetcherPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProjectName}-${Environment}-raw-streaming-data'

  AppleMusicDataFetcherLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-apple-music-data-fetcher'
      Handler: index.handler
      Role: !GetAtt AppleMusicDataFetcherRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // Function code will be updated through Lambda console
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Apple Music Data Fetcher Lambda' })
            };
          };
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          PROJECT_NAME: !Ref ProjectName

  AppleMusicDataFetcherApi:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'apple-music'

  AppleMusicDataFetcherMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref AppleMusicDataFetcherApi
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AppleMusicDataFetcherLambda.Arn}/invocations'

  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-api'
      Description: 'API Gateway for Streaming Analytics Platform'

Outputs:
  LambdaArn:
    Description: 'ARN of the Apple Music data fetcher Lambda function'
    Value: !GetAtt AppleMusicDataFetcherLambda.Arn

  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/apple-music'
    