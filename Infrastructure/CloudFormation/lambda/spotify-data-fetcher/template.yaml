AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function for fetching Spotify data'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'staging'
      - 'prod'
    Description: 'Environment name'

  ProjectName:
    Type: String
    Default: 'streaming-analytics'
    Description: 'Project name for resource naming'

  SpotifyClientId:
    Type: String
    Default: '8cf77f03d31348b4953b2d65d96f1af1'
    Description: 'Spotify Client ID'

  SpotifyClientSecret:
    Type: String
    Default: 'fd20de72b26c4d81a5f4b2bfd72349b0'
    Description: 'Spotify Client Secret'

Resources:
  SpotifyDataFetcherFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-spotify-data-fetcher'
      Handler: index.handler
      Role: !GetAtt SpotifyDataFetcherRole.Arn
      Code:
        ZipFile: |
          const https = require('https');
          const querystring = require('querystring');

          // Cache for the access token
          let cachedToken = null;
          let tokenExpiration = null;

          async function getSpotifyToken() {
            // Check if we have a valid cached token
            if (cachedToken && tokenExpiration && Date.now() < tokenExpiration) {
              return cachedToken;
            }

            const clientId = process.env.SPOTIFY_CLIENT_ID;
            const clientSecret = process.env.SPOTIFY_CLIENT_SECRET;

            return new Promise((resolve, reject) => {
              const authOptions = {
                hostname: 'accounts.spotify.com',
                path: '/api/token',
                method: 'POST',
                headers: {
                  'Authorization': 'Basic ' + Buffer.from(clientId + ':' + clientSecret).toString('base64'),
                  'Content-Type': 'application/x-www-form-urlencoded'
                }
              };

              const req = https.request(authOptions, (res) => {
                let data = '';
                res.on('data', chunk => { data += chunk; });
                res.on('end', () => {
                  try {
                    const response = JSON.parse(data);
                    if (response.access_token) {
                      cachedToken = response.access_token;
                      tokenExpiration = Date.now() + (response.expires_in * 1000);
                      resolve(response.access_token);
                    } else {
                      reject(new Error('No access token in response'));
                    }
                  } catch (error) {
                    reject(error);
                  }
                });
              });

              req.on('error', reject);
              req.write('grant_type=client_credentials');
              req.end();
            });
          }

          async function makeSpotifyRequest(path, token) {
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'api.spotify.com',
                path: path,
                method: 'GET',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                }
              };

              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', chunk => { data += chunk; });
                res.on('end', () => {
                  try {
                    resolve(JSON.parse(data));
                  } catch (error) {
                    reject(error);
                  }
                });
              });

              req.on('error', reject);
              req.end();
            });
          }

          exports.handler = async (event) => {
            try {
              console.log('Event received:', JSON.stringify(event, null, 2));
              
              // Get access token
              const token = await getSpotifyToken();
              
              // Default to new releases if no specific endpoint is provided
              const endpoint = event.queryStringParameters?.endpoint || '/v1/browse/new-releases';
              
              // Make request to Spotify API
              const data = await makeSpotifyRequest(endpoint, token);
              
              return {
                statusCode: 200,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify(data)
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: error.statusCode || 500,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({
                  error: error.message || 'Internal server error'
                })
              };
            }
          };
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SPOTIFY_CLIENT_ID: !Ref SpotifyClientId
          SPOTIFY_CLIENT_SECRET: !Ref SpotifyClientSecret

  SpotifyDataFetcherRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-spotify-fetcher-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

Outputs:
  FunctionName:
    Description: 'Lambda function name'
    Value: !Ref SpotifyDataFetcherFunction

  FunctionArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt SpotifyDataFetcherFunction.Arn