AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function for fetching Spotify data'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'staging'
      - 'prod'
    Description: 'Environment name'

  ProjectName:
    Type: String
    Default: 'streaming-analytics'
    Description: 'Project name for resource naming'

  SpotifyClientId:
    Type: String
    Description: 'Spotify Client ID'
    Default: '8cf77f03d31348b4953b2d65d96f1af1'

  SpotifyClientSecret:
    Type: String
    Description: 'Spotify Client Secret'
    Default: 'fd20de72b26c4d81a5f4b2bfd72349b0'

Resources:
  SpotifyDataFetcherFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-spotify-data-fetcher'
      Handler: index.handler
      Role: !GetAtt SpotifyDataFetcherRole.Arn
      Code:
        ZipFile: |
          const https = require('https');

          async function makeRequest(options, body = null) {
            return new Promise((resolve, reject) => {
              const req = https.request(options, (res) => {
                let data = '';
                res.on('data', (chunk) => { data += chunk; });
                res.on('end', () => {
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    resolve(JSON.parse(data));
                  } else {
                    reject(new Error(`Request failed with status ${res.statusCode}: ${data}`));
                  }
                });
              });
              
              req.on('error', (error) => reject(error));
              if (body) req.write(body);
              req.end();
            });
          }

          async function getSpotifyToken() {
            const clientId = process.env.SPOTIFY_CLIENT_ID;
            const clientSecret = process.env.SPOTIFY_CLIENT_SECRET;
            
            const options = {
              hostname: 'accounts.spotify.com',
              path: '/api/token',
              method: 'POST',
              headers: {
                'Authorization': 'Basic ' + Buffer.from(clientId + ':' + clientSecret).toString('base64'),
                'Content-Type': 'application/x-www-form-urlencoded'
              }
            };
            
            const body = 'grant_type=client_credentials';
            const response = await makeRequest(options, body);
            return response.access_token;
          }

          async function fetchSpotifyData(endpoint, token) {
            const options = {
              hostname: 'api.spotify.com',
              path: endpoint,
              method: 'GET',
              headers: {
                'Authorization': `Bearer ${token}`
              }
            };
            
            return await makeRequest(options);
          }

          exports.handler = async (event) => {
            console.log('Received event:', JSON.stringify(event, null, 2));
            
            try {
              // Get access token
              const token = await getSpotifyToken();
              
              // Default endpoint if none specified
              const endpoint = event.queryStringParameters?.endpoint || '/v1/me';
              
              // Fetch data from Spotify
              const data = await fetchSpotifyData(endpoint, token);
              
              return {
                statusCode: 200,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify(data)
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: error.statusCode || 500,
                headers: {
                  'Content-Type': 'application/json',
                  'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({
                  error: error.message || 'Internal server error'
                })
              };
            }
          }
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SPOTIFY_CLIENT_ID: !Ref SpotifyClientId
          SPOTIFY_CLIENT_SECRET: !Ref SpotifyClientSecret

  SpotifyDataFetcherRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-spotify-fetcher-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub '${ProjectName}-${Environment}-spotify-fetcher-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                Resource: '*'

Outputs:
  FunctionName:
    Description: 'Lambda function name'
    Value: !Ref SpotifyDataFetcherFunction

  FunctionArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt SpotifyDataFetcherFunction.Arn