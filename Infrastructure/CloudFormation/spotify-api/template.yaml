AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway configuration for Spotify OAuth callback'

Parameters:
  ExistingApiId:
    Type: String
    Default: '0o0aso95ik'
    Description: 'ID of existing API Gateway'

Resources:
  SpotifyCallbackFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'spotify-oauth-handler-v2'
      Handler: index.handler
      Role: !GetAtt SpotifyCallbackFunctionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Received callback:', event);
            try {
              const code = JSON.parse(event.body).code;
              return {
                statusCode: 200,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  access_token: 'mock_token',
                  token_type: 'Bearer'
                })
              };
            } catch (error) {
              console.error('Error:', error);
              return {
                statusCode: 500,
                headers: {
                  'Access-Control-Allow-Origin': '*',
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ error: 'Internal server error' })
              };
            }
          }
      Runtime: nodejs18.x
      Timeout: 29
      MemorySize: 128
      Environment:
        Variables:
          SPOTIFY_CLIENT_ID: '8cf77f03d31348b4953b2d65d96f1af1'
          SPOTIFY_CLIENT_SECRET: 'fd20de72b26c4d81a5f4b2bfd72349b0'
          SPOTIFY_REDIRECT_URI: !Sub 'https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/dev/spotify/callback'

  SpotifyCallbackFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ApiGatewayInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*'

  SpotifyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: olswvvxha1
      PathPart: 'spotify'

  CallbackResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ExistingApiId
      ParentId: !Ref SpotifyResource
      PathPart: 'callback'

  CallbackMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref CallbackResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SpotifyCallbackFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  OptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ExistingApiId
      ResourceId: !Ref CallbackResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt SpotifyCallbackFunction.Arn
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExistingApiId}/*'

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - CallbackMethod
      - OptionsMethod
    Properties:
      RestApiId: !Ref ExistingApiId
      Description: 'Deployment for Spotify OAuth callback'

Outputs:
  CallbackUrl:
    Description: 'Spotify Callback URL'
    Value: !Sub 'https://${ExistingApiId}.execute-api.${AWS::Region}.amazonaws.com/dev/spotify/callback'
  
  LambdaFunctionArn:
    Description: 'Lambda Function ARN'
    Value: !GetAtt SpotifyCallbackFunction.Arn
